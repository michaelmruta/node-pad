module.exports = function(RED) {
    "use strict";
    const fs = require('fs');
    const path = require('path');
    // const initSqlJs = require('sql.js');
    const initSqlJs = require('sql.js/dist/sql-asm.js');

    function SQLNode(n) {

        RED.nodes.createNode(this,n);
        this.topic = n.topic;

        var node = this;
        var db_file = path.join( process.env.NODE_RED_HOME, n.database || 'local.sqlite');

        var db;
        initSqlJs().then(function(SQL){
            try {
                var filebuffer = fs.readFileSync(db_file);
                db = new SQL.Database(filebuffer);
            } catch(e) {
                db = new SQL.Database();
            }
        }).catch(function(e) {
            node.status({fill:"red",shape:"ring",text:e.toString()});
        });
        
        this.on('input', function (msg) {
            if(db) {

                if(typeof msg.payload === 'object' && msg.payload) {
                    msg.payload = {};
                }

                var stmt = n.sql || msg.topic;
                stmt.toLocaleLowerCase().split(" ").filter( str => {
                   if(["insert", "update", "alter", "create"].includes(str)) {
                        msg.payload = db.prepare(stmt)
                                        .getAsObject(msg.payload);
                        node.send(msg);
                        var data = db.export();
                        var buffer = Buffer.from(data);
                        fs.writeFileSync(db_file, buffer);
                   } else {
                        var contents = db.exec(stmt);
                        msg.payload = contents;
                        node.send(msg);
                   }
                });

            }
        });

        this.on("close", function() {
            var data = db.export();
            var buffer = Buffer.from(data);
            fs.writeFileSync(db_file, buffer);
        });
    }

    RED.nodes.registerType("sqlite.js",SQLNode);
}
